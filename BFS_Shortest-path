#include <stdio.h>
#include <conio.h>

#define MAX 20

int graph[MAX][MAX];   // adjacency matrix
int visited[MAX];
int parent[MAX];
int queue[MAX];
int front, rear;

void bfs(int n, int start, int end) {
    int i, node, v;
    int path[MAX], len;

    // Initialize visited and parent
    for(i=0;i<n;i++) {
        visited[i] = 0;
        parent[i] = -1;
    }

    front = rear = 0;
    visited[start] = 1;
    queue[rear++] = start;

    // BFS loop
    while(front < rear) {
        node = queue[front++];

        if(node == end) break; // reached destination

        for(i=0;i<n;i++) {
            if(graph[node][i] && !visited[i]) {
                visited[i] = 1;
                parent[i] = node;
                queue[rear++] = i;
            }
        }
    }

    // Reconstruct path
    len = 0;
    v = end;
    while(v != -1) {
        path[len++] = v;
        v = parent[v];
    }

    if(!visited[end]) {
        printf("\nNo path found from %d to %d\n", start, end);
        return;
    }

    printf("\nShortest Path from %d to %d: ", start, end);
    for(i=len-1;i>=0;i--) {
        printf("%d ", path[i]);
    }
    printf("\n");
}

void main() {
    int n, i, j, start, end;

    clrscr();

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("\nEnter adjacency matrix (%dx%d):\n", n, n);
    for(i=0;i<n;i++) {
        for(j=0;j<n;j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("\nEnter start node: ");
    scanf("%d", &start);
    printf("Enter end node: ");
    scanf("%d", &end);

    bfs(n, start, end);

    getch();
}
